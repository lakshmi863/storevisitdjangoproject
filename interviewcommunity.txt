
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\empty.py
================================================================================
import os

def extract_files_and_content(root_folder, output_file):
    ignore_dirs = {'node_modules', 'venv', 'logs'}
    ignore_files = {'package-lock.json'}

    with open(output_file, 'w', encoding='utf-8') as out_file:
        for root, dirs, files in os.walk(root_folder):
            # Skip ignored directories
            dirs[:] = [d for d in dirs if d not in ignore_dirs]

            for file in files:
                if file in ignore_files:
                    continue  # Skip ignored files

                file_path = os.path.join(root, file)
                out_file.write(f"\n{'='*80}\n")
                out_file.write(f"File: {file_path}\n")
                out_file.write(f"{'='*80}\n")
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        out_file.write(f.read())
                except Exception as e:
                    out_file.write(f"[Error reading file: {e}]\n")

# Usage
root_folder_path = r"C:\Users\Lenovo\Desktop\React and Django"
output_text_file = "interviewcommunity.txt"

extract_files_and_content(root_folder_path, output_text_file)
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\interviewcommunity.txt
================================================================================

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\COMMIT_EDITMSG
================================================================================
first commit

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\config
================================================================================
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[remote "origin"]
	url = https://github.com/lakshmi863/storevisitdjangoproject.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\description
================================================================================
Unnamed repository; edit this file 'description' to name the repository.

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\FETCH_HEAD
================================================================================
8c0ead4ef08c3fda173c130f0385ad1f6c04d829		branch 'main' of https://github.com/lakshmi863/storevisitdjangoproject

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\HEAD
================================================================================
ref: refs/heads/main

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\index
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xb7 in position 13: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\hooks\applypatch-msg.sample
================================================================================
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\hooks\commit-msg.sample
================================================================================
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\hooks\fsmonitor-watchman.sample
================================================================================
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\hooks\post-update.sample
================================================================================
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\hooks\pre-applypatch.sample
================================================================================
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\hooks\pre-commit.sample
================================================================================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\hooks\pre-merge-commit.sample
================================================================================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\hooks\pre-push.sample
================================================================================
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\hooks\pre-rebase.sample
================================================================================
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\hooks\pre-receive.sample
================================================================================
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\hooks\prepare-commit-msg.sample
================================================================================
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\hooks\push-to-checkout.sample
================================================================================
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\hooks\sendemail-validate.sample
================================================================================
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\hooks\update.sample
================================================================================
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\info\exclude
================================================================================
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\01\20ac1fb32a2d0f1fe66cbd1bd202ef457aa28b
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\02\1338f9e7e2ae7dbbf6fcba0e5c7df89d684a80
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\07\bda9da7a5f434bf9c6ce10a21dc1e84f028d80
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\08\0d6c77ac21bb2ef88a6992b2b73ad93daaca92
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\09\2efbf4ea987fbc315b952a26a7a84b56ab0143
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\0f\7ed835748ef64ba3b81efbce8c2e20a3ffea8e
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\15\90f246114dbaea1bd67db573b081bc491657f3
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\15\deb0e335a18f1b6df62899a36f77932f48bca6
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\1e\9526a30fa829e84b00ec42b13385ab2b3582dc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\1f\03afeece5ac28064fa3c73a29215037465f789
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x8e in position 3: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\24\f277e6b03641d3f8950f944717bace5bc2f4c7
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xd0 in position 21: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\2c\6422046a6f18650b0055bf4612d45ad0a242e4
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xb3 in position 9: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\2e\c9683e979038483d0d390595a23c801c40ae79
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xd0 in position 18: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\2f\0ae1af9c1fec2f201d7e60c845fa9d03cf6825
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xcb in position 4: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\32\bff519590650bb95f5ae1a1ce53075e6f84224
================================================================================
[Error reading file: 'utf-8' codec can't decode bytes in position 2-3: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\38\2df1b18c334b976c5754bd57386f86c8082b5f
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xb3 in position 8: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\38\84cbb2274039fefdb30a2407b74aa273ae84ba
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\39\f49e4ec748d1030b7efd163695bd1aae5a18e6
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\3e\2b2836da47178b025f959067bde4aeb30df097
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x9f in position 9: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\3e\3c76595bcab116bb99a1722e542e07cdd23c71
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xcc in position 3: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\3e\4de73e056425803ce78d2eb55d23ab8afd9ca4
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\44\c0de93933ad153e9bf8fc751c65b662722220b
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xbd in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\4d\29575de80483b005c29bfcac5061cd2f45313e
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x8d in position 3: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\52\53d3ad9e6be6690549cb255f5952337b02401d
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x82 in position 6: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\58\2e6a7f44371adff8cf09f4a11dc41f9bec4657
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xd3 in position 6: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\58\beeaccd87e230076cab531b8f418f40b6d1aeb
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\5b\8be1ec68ebc59015f8b59d8b3a7079b768642e
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x85 in position 15: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\5d\b3dda1a6a1d04dd795f8ff750a7f74164d2d6b
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xd4 in position 6: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\5e\806ea88efcdd6891a723d923d745c001be69f3
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf6 in position 9: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\60\58d81936d51221e6560ef5c28ddd11001b0a97
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\68\e0b3ba328251cb8e2b415e8af1d13263901656
================================================================================
[Error reading file: 'utf-8' codec can't decode bytes in position 2-3: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\6a\ec653952989d0f1ed8f24306846d1c73846dd4
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xad in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\6e\66d788b611d5ed0fb6b0ba2a6cb9178a713579
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\74\b5e053450a48a6bdb4d71aad648e7af821975c
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xcb in position 4: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\77\da0ac225fff443c1b9f8ef4e6a2e634a2c6b83
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\7b\cc3e48a8f812d45aa2ad6383b504ac518e944b
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xcb in position 4: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\7c\e503c2dd97ba78597f6ff6e4393132753573f6
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\7d\d9c97404932e3d26c5ab802952a066eaf6b158
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xbf in position 4: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\7f\e5af7741133fced7ceb0babd58bdc47a8d3466
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\8c\0ead4ef08c3fda173c130f0385ad1f6c04d829
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xa5 in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\8c\ba61a1ce5fff6453aa94d8420e4d6b37aa51ab
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x8c in position 22: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\8e\29b36dea7f04ae8729d8b33ecc05c3c9b0fe46
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xcb in position 21: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\8f\2609b7b3e0e3897ab3bcaad13caf6876e48699
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x8f in position 3: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\8f\3f69f89d79f25aa3acaa0a93d871e6939845f8
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x91 in position 3: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\9d\fc1c058cebbef8b891c5062be6f31033d7d186
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x96 in position 3: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\a0\797b9bd25da63c8e1609fd5deab58c7ad5694e
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x9d in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\a1\1777cc471a4344702741ab1c8a588998b1311a
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x8d in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\a4\e47a6545bc15971f8f63fba70e4013df88a664
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xb0 in position 8: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\aa\069f27cbd9d53394428171c3989fd03db73c76
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x8f in position 5: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\b6\e6566ab1d5d1ef1d74c173ee3ef6d0281be104
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\c0\172760be7d03b3041f43827a435d886ee31cf5
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\c6\6c833932f84d23585f92487195df94842af6ff
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x95 in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\d5\63c0fb10ba0e42724b21286eb546ee4e5734fc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf5 in position 9: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\dd\02672fc04f2e78adb4c7e6a9f9a80619a843ea
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\e1\3c0810404f7990ec759e22a5dee2cc02c1dd97
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\e6\9de29bb2d1d6434b8b29ae775ad8c2e48c5391
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\e6\a34115c9cf3ddcb3cbdc93a517f1282d5f4f29
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xcd in position 19: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\e9\e57dc4d41b9b46e05112e9f45b7ea6ac0ba15e
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\eb\6431e2c0b15d12a46e1e435facbc8484b6f0ac
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x92 in position 3: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\ec\2585e8c0bb8188184ed1e0703c4c8f2a8419b0
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\ed\01e6acff07411d7b70b40808d72e64f55d2fd6
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x90 in position 3: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\ef\8f41e89735de00b68c733574b275f789c044bf
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\f3\805afa55a3bf76bb61c2cc94e186e4fdf3258b
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xca in position 3: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\fa\7efbfa19100cd9199bdfd82e53bf645293addf
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x88 in position 18: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\fc\44b0a3796c0e0a64c3d858ca038bd4570465d9
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x8e in position 7: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\objects\fd\09314d67f2719439b547bce7c0e8080634904e
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x85 in position 2: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\refs\heads\main
================================================================================
8c0ead4ef08c3fda173c130f0385ad1f6c04d829

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\.git\refs\remotes\origin\main
================================================================================
8c0ead4ef08c3fda173c130f0385ad1f6c04d829

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\db.sqlite3
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x8b in position 99: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\manage.py
================================================================================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\admin.py
================================================================================
from django.contrib import admin
from django.contrib.auth import get_user_model
from django.contrib.auth.admin import UserAdmin

# Import all of your models so we can register them
from .models import Store, Employee, Company, Activity

# Get the custom user model lazily
User = get_user_model()

# This is our custom admin configuration for our custom user.
# It inherits from the standard UserAdmin but overrides the problematic fields.
class CustomUserAdmin(UserAdmin):
    # What fields to display in the main user list page
    list_display = ('email', 'name', 'role', 'is_staff', 'is_active')
    
    # What fields to use when searching for a user
    search_fields = ('email', 'name')
    
    # How to order the list of users
    ordering = ('email',)

    # --- Crucial fields to override ---
    # Since we don't use a 'username' field, these must be explicitly set.
    fieldsets = (
        (None, {'fields': ('email', 'password')}),
        ('Personal Info', {'fields': ('name', 'role')}),
        ('Permissions', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),
        ('Important dates', {'fields': ('last_login',)}),
    )
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('email', 'name', 'role', 'password'),
        }),
    )
    
    # These must be empty for custom user models
    filter_horizontal = ()
    list_filter = ()


# Now we register ALL our models with the admin site.
admin.site.register(User, CustomUserAdmin)
admin.site.register(Store)
admin.site.register(Employee)
admin.site.register(Company)
admin.site.register(Activity)
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\apps.py
================================================================================
from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\models.py
================================================================================
# C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\models.py

from django.db import models
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager
from django.conf import settings
from django.db.models.signals import post_save
from django.dispatch import receiver

# -------------------
# Company Model
# -------------------
class Company(models.Model):
    name = models.CharField(max_length=150)
    address = models.TextField(blank=True)
    def __str__(self): return self.name
    class Meta: verbose_name_plural = "Companies"

# -------------------
# Custom User Manager & Model
# -------------------
class CustomUserManager(BaseUserManager):
    def create_user(self, email, name, password=None, role="employee", **extra_fields):
        if not email:
            raise ValueError("The Email field is required")
        email = self.normalize_email(email)
        user = self.model(email=email, name=name, role=role, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, name, password=None, **extra_fields):
        extra_fields.setdefault("role", "admin")
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)
        return self.create_user(email, name, password, **extra_fields)

class CustomUser(AbstractBaseUser, PermissionsMixin):
    ROLE_CHOICES = [("admin", "Admin"), ("employee", "Employee")]
    name = models.CharField(max_length=100)
    email = models.EmailField(unique=True)
    role = models.CharField(max_length=20, choices=ROLE_CHOICES, default="employee")
    is_active = models.BooleanField(default=True)
    is_staff = models.BooleanField(default=False)
    objects = CustomUserManager()
    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["name"]
    def __str__(self): return f"{self.name} ({self.role})"

# -------------------
# Store Model
# -------------------
class Store(models.Model):
    store_id = models.AutoField(primary_key=True)
    store_information = models.CharField(max_length=255)
    location = models.CharField(max_length=100, default="Hyderabad")
    latitude = models.FloatField(null=True, blank=True)
    longitude = models.FloatField(null=True, blank=True)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name="stores", null=True, blank=True)
    def __str__(self): return f"Store {self.store_id} - {self.store_information}"

# -------------------
# Employee Model
# -------------------
class Employee(models.Model):
    emp_id = models.AutoField(primary_key=True)
    emp_name = models.CharField(max_length=100)
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name="employee_profile", null=True, blank=True)
    stores = models.ManyToManyField(Store, related_name="employees", blank=True)
    company = models.ForeignKey(Company, on_delete=models.CASCADE, related_name="employees", null=True, blank=True)
    def __str__(self): return f"{self.emp_name} (ID: {self.emp_id})"

# -------------------
# Activity Model
# -------------------
class Activity(models.Model):
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE, related_name="activities")
    store = models.ForeignKey(Store, on_delete=models.CASCADE, related_name="activities")
    remarks = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    def __str__(self): return f"Activity by {self.employee.emp_name} at {self.store.store_information} on {self.created_at.strftime('%Y-%m-%d')}"

# -------------------
# Signals
# -------------------
@receiver(post_save, sender=CustomUser)
def create_employee_profile(sender, instance, created, **kwargs):
    if created and instance.role == "employee":
        Employee.objects.create(user=instance, emp_name=instance.name)
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\serializers.py
================================================================================
from rest_framework import serializers
from django.contrib.auth import authenticate
from rest_framework_simplejwt.serializers import TokenObtainPairSerializer
from django.contrib.auth import get_user_model

# Import models directly. It's safe here because they don't depend on serializers.
from .models import Store, Employee, Activity, Company

# Get the CustomUser model once. This is the recommended way.
User = get_user_model()


# --- User & Authentication Serializers ---

# A simple serializer to display user data without the password.
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'name', 'email', 'role')

# This is the new, corrected RegisterSerializer.
# It is NOT a ModelSerializer, which breaks the circular dependency.
class RegisterSerializer(serializers.Serializer):
    name = serializers.CharField(max_length=100, required=True)
    email = serializers.EmailField(required=True)
    password = serializers.CharField(min_length=6, write_only=True, required=True)
    role = serializers.ChoiceField(choices=User.ROLE_CHOICES, default='employee')

    def create(self, validated_data):
        """
        Create and return a new user.
        """
        user = User.objects.create_user(
            email=validated_data['email'],
            name=validated_data['name'],
            password=validated_data['password'],
            role=validated_data['role']
        )
        return user


class EmailTokenObtainPairSerializer(TokenObtainPairSerializer):
    def validate(self, attrs):
        # The default validation is sufficient if the USERNAME_FIELD is 'email'.
        # We add custom data to the response.
        data = super().validate(attrs)
        
        # Add custom claims
        data.update({
            "user_id": self.user.id,
            "name": self.user.name,
            "role": self.user.role,
            "email": self.user.email,
        })
        return data


# --- Application Data Serializers ---

class CompanySerializer(serializers.ModelSerializer):
    class Meta:
        model = Company
        fields = '__all__'


class StoreSerializer(serializers.ModelSerializer):
    class Meta:
        model = Store
        fields = ["store_id", "store_information", "location", "latitude", "longitude", "company"]


class ActivitySerializer(serializers.ModelSerializer):
    # Make the response more user-friendly by including the store name
    store_name = serializers.CharField(source='store.store_information', read_only=True)
    
    class Meta:
        model = Activity
        fields = ['id', 'employee', 'store', 'store_name', 'remarks', 'created_at']
        read_only_fields = ['employee'] # Employee is set from the request user
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\tests.py
================================================================================
from django.test import TestCase

# Create your tests here.

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\urls.py
================================================================================
# THIS LINE IS CRUCIAL
from django.urls import path

from .views import (
    RegisterView,
    EmailTokenObtainPairView,
    EmployeeStoresView,
    CreateActivityView,
    TodaysActivitiesView,
)

urlpatterns = [
    # --- Authentication ---
    path("register/", RegisterView.as_view(), name="register"),
    path("login/", EmailTokenObtainPairView.as_view(), name="login"),

    # --- Employee Data Endpoints ---
    path("employee/stores/", EmployeeStoresView.as_view(), name="employee-stores"),
    
    # --- Activity Endpoints ---
    path("activities/today/", TodaysActivitiesView.as_view(), name="todays-activities"),
    path("activities/create/", CreateActivityView.as_view(), name="create-activity"),
]
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\views.py
================================================================================
from rest_framework import generics, status
from rest_framework.permissions import AllowAny, IsAuthenticated
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework_simplejwt.views import TokenObtainPairView
from django.utils import timezone
from geopy.distance import geodesic

# Import Models used in this file
from .models import CustomUser, Employee, Store, Activity

# Import Serializers used in this file
from .serializers import (
    RegisterSerializer,
    StoreSerializer,
    EmailTokenObtainPairSerializer,
    ActivitySerializer
)

# -------------------------------
# User Registration
# -------------------------------
class RegisterView(generics.CreateAPIView):
    queryset = CustomUser.objects.all()
    serializer_class = RegisterSerializer
    permission_classes = [AllowAny]


# -------------------------------
# User Login
# -------------------------------
class EmailTokenObtainPairView(TokenObtainPairView):
    permission_classes = [AllowAny]
    serializer_class = EmailTokenObtainPairSerializer


# -------------------------------
# GET List of Stores for the Logged-in Employee
# -------------------------------
class EmployeeStoresView(generics.ListAPIView):
    serializer_class = StoreSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        try:
            return self.request.user.employee_profile.stores.all()
        except Employee.DoesNotExist:
            return Store.objects.none()


# -------------------------------
# POST a New Activity (with Geolocation Check)
# -------------------------------
class CreateActivityView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        store_id = request.data.get('store')
        remarks = request.data.get('remarks')
        user_latitude = request.data.get('latitude')
        user_longitude = request.data.get('longitude')

        if not all([store_id, user_latitude, user_longitude]):
            return Response({"error": "Store ID and your current location (latitude, longitude) are required."}, status=status.HTTP_400_BAD_REQUEST)

        try:
            store = Store.objects.get(pk=store_id)
            employee = request.user.employee_profile
        except (Store.DoesNotExist, Employee.DoesNotExist):
            return Response({"error": "Invalid Store or Employee profile."}, status=status.HTTP_404_NOT_FOUND)
        
        user_location = (user_latitude, user_longitude)
        store_location = (store.latitude, store.longitude)
        
        try:
            distance = geodesic(user_location, store_location).meters
        except (ValueError, TypeError):
             return Response({"error": "Invalid or missing location coordinates for the store or user."}, status=status.HTTP_400_BAD_REQUEST)

        if distance > 100:
            return Response({
                "error": f"You cannot log this activity. You are approximately {int(distance)} meters away from the store."
            }, status=status.HTTP_403_FORBIDDEN)
            
        activity_data = {
            'employee': employee.pk,
            'store': store.pk,
            'remarks': remarks,
        }
        
        serializer = ActivitySerializer(data=activity_data)
        if serializer.is_valid():
            serializer.save(employee=employee) # Pass employee instance to the save method
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


# -------------------------------
# GET List of Today's Activities for the Logged-in Employee
# -------------------------------
class TodaysActivitiesView(generics.ListAPIView):
    serializer_class = ActivitySerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        try:
            employee = self.request.user.employee_profile
            today = timezone.now().date()
            return Activity.objects.filter(employee=employee, created_at__date=today).order_by('-created_at')
        except Employee.DoesNotExist:
            return Activity.objects.none()
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\__init__.py
================================================================================

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\migrations\0001_initial.py
================================================================================
# Generated by Django 5.1.5 on 2025-09-03 11:12

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('address', models.TextField(blank=True)),
            ],
            options={
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('employee', 'Employee')], default='employee', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('store_id', models.AutoField(primary_key=True, serialize=False)),
                ('store_information', models.CharField(max_length=255)),
                ('location', models.CharField(default='Hyderabad', max_length=100)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stores', to='accounts.company')),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('emp_id', models.AutoField(primary_key=True, serialize=False)),
                ('emp_name', models.CharField(max_length=100)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='accounts.company')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employee_profile', to=settings.AUTH_USER_MODEL)),
                ('stores', models.ManyToManyField(blank=True, related_name='employees', to='accounts.store')),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='accounts.employee')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='accounts.store')),
            ],
        ),
    ]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\migrations\0002_employee_user.py
================================================================================
# Generated by Django 5.1.5 on 2025-09-02 22:12

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='employee',
            name='user',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employee_profile', to=settings.AUTH_USER_MODEL),
        ),
    ]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\migrations\0003_employeetask.py
================================================================================
# Generated by Django 5.1.5 on 2025-09-03 04:33

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0002_employee_user'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmployeeTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence_order', models.PositiveIntegerField()),
                ('arrival_status', models.BooleanField(default=False)),
                ('comments', models.TextField(blank=True, null=True)),
                ('issue', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('arrival_time', models.DateTimeField(blank=True, null=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='accounts.employee')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='accounts.store')),
            ],
            options={
                'ordering': ['sequence_order'],
                'unique_together': {('employee', 'store', 'sequence_order')},
            },
        ),
    ]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\migrations\__init__.py
================================================================================

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\migrations\__pycache__\0001_initial.cpython-313.pyc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\migrations\__pycache__\0002_employee_user.cpython-313.pyc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\migrations\__pycache__\0003_employeetask.cpython-313.pyc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\migrations\__pycache__\__init__.cpython-313.pyc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\__pycache__\admin.cpython-313.pyc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\__pycache__\apps.cpython-313.pyc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\__pycache__\models.cpython-313.pyc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\__pycache__\serializers.cpython-313.pyc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\__pycache__\urls.cpython-313.pyc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\__pycache__\views.cpython-313.pyc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\accounts\__pycache__\__init__.cpython-313.pyc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\backend\asgi.py
================================================================================
"""
ASGI config for backend project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')

application = get_asgi_application()

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\backend\requirements.txt
================================================================================

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\backend\settings.py
================================================================================
"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os

BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-^u4nt3-fzfbabg#5k-i0jw727$^flgzfqxfczh%$q1u0t%b%^*"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "LAPTOP-G8KF0NC9",   # add your computer name
]



# Application definition
# In settings.py
INSTALLED_APPS = [
    # YOUR LOCAL APP MUST BE AT THE TOP
    "accounts.apps.AccountsConfig",

    # RE-ENABLE THE DEFAULT DJANGO APPS
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Third-party apps
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "django_extensions", # <-- RE-ENABLE THIS AS WELL
]

CORS_ALLOW_ALL_ORIGINS = True 

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # 👈 must be at the top
    "django.middleware.common.CommonMiddleware",

    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# Static files
STATIC_URL = "static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Django REST Framework
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
}


# JWT Settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

# CORS
CORS_ALLOW_ALL_ORIGINS = True

# Custom user model (if created in accounts/models.py)
AUTH_USER_MODEL = "accounts.CustomUser"
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\backend\urls.py
================================================================================
"""
URL configuration for backend project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path("admin/", admin.site.urls), # <-- COMMENT THIS LINE OUT TOO
    path("accounts/", include("accounts.urls")),
]
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\backend\wsgi.py
================================================================================
"""
WSGI config for backend project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')

application = get_wsgi_application()

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\backend\__init__.py
================================================================================

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\backend\__pycache__\settings.cpython-313.pyc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\backend\__pycache__\urls.cpython-313.pyc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\backend\__pycache__\wsgi.cpython-313.pyc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Backend\backend\__pycache__\__init__.cpython-313.pyc
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xf3 in position 0: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\.gitignore
================================================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\package.json
================================================================================
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "cra-template": "1.3.0",
    "react": "^19.1.1",
    "react-confetti": "^6.4.0",
    "react-dom": "^19.1.1",
    "react-router-dom": "^6.30.1",
    "react-scripts": "5.0.1",
    "web-vitals": "^5.1.0"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17"
  }
}

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\postcss.config.js
================================================================================
// Frontend/postcss.config.js - The correct v3 configuration
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\README.md
================================================================================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\tailwind.config.js
================================================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\public\favicon.ico
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0xe3 in position 14: invalid continuation byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\public\index.html
================================================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\public\logo192.png
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\public\logo512.png
================================================================================
[Error reading file: 'utf-8' codec can't decode byte 0x89 in position 0: invalid start byte]

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\public\manifest.json
================================================================================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\public\robots.txt
================================================================================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\api.js
================================================================================
import axios from "axios";

const API = axios.create({
  baseURL: "http://127.0.0.1:8000/api/",
});

// Add token to headers automatically
API.interceptors.request.use((req) => {
  const token = localStorage.getItem("access");
  if (token) {
    req.headers.Authorization = `Bearer ${token}`;
  }
  return req;
});

export default API;

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\App.css
================================================================================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\App.js
================================================================================
// C:\Users\Lenovo\Desktop\React and Django\Frontend\src\App.js

import { BrowserRouter as Router, Route, Routes } from "react-router-dom";
import Login from "./pages/Login";
import Register from "./pages/Register";
import Dashboard from "./pages/Dashboard";
import CreateActivity from "./pages/CreateActivity";
import PrivateRoute from "./components/PrivateRoute"; // Import the private route

function App() {
  return (
    <Router>
      <div className="bg-gray-100 min-h-screen">
        <Routes>
          {/* Public Routes */}
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />

          {/* Protected Routes */}
          <Route element={<PrivateRoute />}>
            <Route path="/" element={<Dashboard />} />
            <Route path="/create-activity" element={<CreateActivity />} />
          </Route>

        </Routes>
      </div>
    </Router>
  );
}

export default App;
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\App.test.js
================================================================================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\index.css
================================================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* You can add custom global styles below this line if needed */
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\index.js
================================================================================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\logo.svg
================================================================================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\reportWebVitals.js
================================================================================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\setupTests.js
================================================================================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\components\PrivateRoute.js
================================================================================
// C:\Users\Lenovo\Desktop\React and Django\Frontend\src\components\PrivateRoute.js

import React from 'react';
import { Navigate, Outlet } from 'react-router-dom';

const PrivateRoute = () => {
  const token = localStorage.getItem('access');
  
  // If authorized, return an outlet that will render child elements
  // If not, return element that will navigate to login page
  return token ? <Outlet /> : <Navigate to="/login" />;
};

export default PrivateRoute;
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\pages\axiosSetup.js
================================================================================
import axios from "axios";

const api = axios.create({
  baseURL: "http://127.0.0.1:8000/",
});

// Attach access token to every request
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("access");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Handle token refresh
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      try {
        const refresh = localStorage.getItem("refresh");
        const res = await axios.post("http://127.0.0.1:8000/api/token/refresh/", {
          refresh,
        });

        localStorage.setItem("access", res.data.access);
        api.defaults.headers.common["Authorization"] = `Bearer ${res.data.access}`;

        return api(originalRequest);
      } catch (err) {
        console.error("Refresh token expired, please log in again");
        localStorage.removeItem("access");
        localStorage.removeItem("refresh");
        window.location.href = "/login"; // redirect to login
      }
    }

    return Promise.reject(error);
  }
);

export default api;

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\pages\CreateActivity.js
================================================================================
// C:\Users\Lenovo\Desktop\React and Django\Frontend\src\pages\CreateActivity.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const CreateActivity = () => {
    const [stores, setStores] = useState([]);
    const [selectedStore, setSelectedStore] = useState('');
    const [remarks, setRemarks] = useState('');
    const [error, setError] = useState('');
    const [message, setMessage] = useState(''); // For user feedback
    const [isSubmitting, setIsSubmitting] = useState(false);
    const navigate = useNavigate();
    const token = localStorage.getItem('access');

    useEffect(() => {
        const fetchStores = async () => {
            try {
                const res = await axios.get('http://127.0.0.1:8000/accounts/employee/stores/', {
                    headers: { Authorization: `Bearer ${token}` }
                });
                setStores(res.data || []);
                if (res.data && res.data.length > 0) {
                    setSelectedStore(res.data[0].store_id);
                }
            } catch (err) {
                console.error("Error fetching stores:", err);
            }
        };
        fetchStores();
    }, [token]);

    const handleSubmit = (event) => {
        event.preventDefault();
        setError('');
        setMessage('Getting your current location...');
        setIsSubmitting(true);

        navigator.geolocation.getCurrentPosition(
            async (position) => {
                const { latitude, longitude } = position.coords;
                setMessage('Verifying location and submitting...');
                try {
                    await axios.post('http://127.0.0.1:8000/accounts/activities/create/', {
                        store: selectedStore,
                        remarks,
                        latitude,
                        longitude,
                    }, { headers: { Authorization: `Bearer ${token}` } });
                    
                    navigate('/'); // Success! Redirect to dashboard.
                } catch (err) {
                    setError(err.response?.data?.error || 'An unexpected error occurred.');
                    setMessage('');
                } finally {
                    setIsSubmitting(false);
                }
            },
            (geoError) => {
                setError(`Location Error: ${geoError.message}. Please allow location access and try again.`);
                setMessage('');
                setIsSubmitting(false);
            },
            { enableHighAccuracy: true, timeout: 15000 }
        );
    };

    return (
        <div className="min-h-screen flex items-center justify-center p-4">
            <div className="w-full max-w-lg p-8 space-y-6 bg-white rounded-xl shadow-lg">
                <h2 className="text-2xl font-bold text-center text-gray-900">Create New Activity</h2>
                 <button onClick={() => navigate(-1)} className="text-sm text-indigo-600 hover:text-indigo-500">
                    &larr; Back to Dashboard
                </button>
                <form onSubmit={handleSubmit} className="space-y-6">
                    {message && !error && <p className="text-sm text-center text-blue-600 bg-blue-100 p-3 rounded-md">{message}</p>}
                    {error && <p className="text-sm text-center text-red-600 bg-red-100 p-3 rounded-md">{error}</p>}
                    <div>
                        <label className="text-sm font-medium text-gray-700">Select Store</label>
                        <select
                            value={selectedStore}
                            onChange={(e) => setSelectedStore(e.target.value)}
                            required
                            className="w-full px-3 py-2 mt-1 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
                        >
                            {stores.map(store => (
                                <option key={store.store_id} value={store.store_id}>
                                    {store.store_information}
                                </option>
                            ))}
                        </select>
                    </div>
                    <div>
                        <label className="text-sm font-medium text-gray-700">Remarks / Feedback</label>
                        <textarea
                            value={remarks}
                            onChange={(e) => setRemarks(e.target.value)}
                            rows={4}
                            className="w-full px-3 py-2 mt-1 border border-gray-300 rounded-md shadow-sm"
                            placeholder="Example: Order received for 10 units."
                        />
                    </div>
                    <button type="submit" disabled={isSubmitting} className="w-full py-2 px-4 text-sm font-medium text-white bg-indigo-600 rounded-md hover:bg-indigo-700 disabled:bg-gray-400 transition-colors">
                        {isSubmitting ? 'Submitting...' : 'Log Visit'}
                    </button>
                </form>
            </div>
        </div>
    );
};

export default CreateActivity;
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\pages\DailyTasks.js
================================================================================
// Frontend/src/pages/DailyTasks.js

import { useEffect, useState } from "react";
import axios from "axios";

export default function DailyTasks() {
  const [tasks, setTasks] = useState([]);
  const [loading, setLoading] = useState(true);
  const token = localStorage.getItem("access");

  // Fetch today’s visits
  useEffect(() => {
    (async () => {
      try {
        const res = await axios.get("http://127.0.0.1:8000/accounts/today-visits/", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setTasks(res.data || []);
      } catch (err) {
        console.error("Error fetching tasks:", err);
      } finally {
        setLoading(false);
      }
    })();
  }, [token]);

  // Find the first task that is not completed to determine the active task
  const activeTask = tasks.find(task => task.status !== 'completed');

  // Mark arrival
  const markArrived = async (taskId) => {
    try {
      const res = await axios.patch(
        `http://127.0.0.1:8000/accounts/visits/${taskId}/arrive/`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setTasks((prev) =>
        prev.map((t) => (t.id === taskId ? res.data : t))
      );
    } catch (err) {
      console.error("Error marking arrival:", err);
      alert(err.response?.data?.error || "Could not mark arrival");
    }
  };

  // Complete visit
  const completeVisit = async (taskId) => {
    const comments = prompt("Enter any comments (optional):") || "";
    const issue = prompt("Enter any issues (optional):") || "";

    try {
      const res = await axios.patch(
        `http://127.0.0.1:8000/accounts/visits/${taskId}/complete/`,
        { comments, issue },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      setTasks((prev) =>
        prev.map((t) => (t.id === taskId ? res.data : t))
      );
    } catch (err) {
      console.error("Error completing visit:", err);
      alert(err.response?.data?.error || "Could not complete visit");
    }
  };

  if (loading) return <div>Loading daily tasks…</div>;
  if (!tasks.length) return <div>No tasks for today.</div>;

  return (
    <div style={{ padding: 16 }}>
      <h2>My Daily Tasks</h2>
      <ul style={{ listStyle: "none", padding: 0 }}>
        {tasks.map((t) => (
          <li
            key={t.id}
            style={{
              marginBottom: 12,
              border: "1px solid #ddd",
              padding: 12,
              borderRadius: 8,
              backgroundColor: activeTask && t.id !== activeTask.id ? '#f0f0f0' : 'transparent',
              color: activeTask && t.id !== activeTask.id ? '#999' : 'inherit'
            }}
          >
            <div>
              <strong>{t.store.store_information}</strong> — {t.store.location}
            </div>
            <div>
              Lat: {t.store.latitude} | Lng: {t.store.longitude}
            </div>
            <div>Order: {t.sequence_order}</div>
            <div>
              Status: {t.status}
            </div>
            <div>
              Arrived: {t.arrival_time ? new Date(t.arrival_time).toLocaleTimeString() : "Not yet"}
            </div>

            <div style={{ marginTop: 8 }}>
              {!t.arrival_status && (
                <button 
                  onClick={() => markArrived(t.id)} 
                  disabled={activeTask && t.id !== activeTask.id}
                >
                  Mark Arrived
                </button>
              )}
              {t.arrival_status && t.status !== "completed" && (
                <button onClick={() => completeVisit(t.id)}>Complete Visit</button>
              )}
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\pages\Dashboard.js
================================================================================
// C:\Users\Lenovo\Desktop\React and Django\Frontend\src\pages\Dashboard.js

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Link, useNavigate } from 'react-router-dom';

const Dashboard = () => {
    const [activities, setActivities] = useState([]);
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();
    const token = localStorage.getItem('access');

    useEffect(() => {
        const fetchTodaysActivities = async () => {
            try {
                const response = await axios.get('http://127.0.0.1:8000/accounts/activities/today/', {
                    headers: { Authorization: `Bearer ${token}` }
                });
                setActivities(response.data);
            } catch (error) {
                console.error("Failed to fetch activities:", error);
            } finally {
                setLoading(false);
            }
        };
        fetchTodaysActivities();
    }, [token]);

    const handleLogout = () => {
        localStorage.removeItem('access');
        localStorage.removeItem('refresh');
        localStorage.removeItem('user_role');
        navigate('/login');
    };

    return (
        <div className="min-h-screen bg-gray-100">
            <header className="bg-white shadow-sm">
                <div className="max-w-4xl mx-auto py-4 px-4 sm:px-6 lg:px-8 flex justify-between items-center">
                    <h1 className="text-2xl font-bold text-gray-900">Dashboard</h1>
                    <button onClick={handleLogout} className="py-2 px-4 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700">
                        Logout
                    </button>
                </div>
            </header>
            <main className="max-w-4xl mx-auto py-6 sm:px-6 lg:px-8">
                <div className="mb-6 text-right">
                    <Link to="/create-activity">
                        <button className="py-2 px-6 text-base font-medium text-white bg-indigo-600 rounded-lg shadow-md hover:bg-indigo-700">
                            + Create New Activity
                        </button>
                    </Link>
                </div>
                <div className="bg-white p-6 rounded-lg shadow-md">
                    <h2 className="text-xl font-semibold mb-4 text-gray-800">Today's Activities</h2>
                    {loading ? (
                        <p>Loading...</p>
                    ) : activities.length > 0 ? (
                        <ul className="divide-y divide-gray-200">
                            {activities.map(activity => (
                                <li key={activity.id} className="py-4">
                                    <p className="font-semibold text-gray-900">{activity.store_name}</p>
                                    <p className="text-sm text-gray-700 mt-1">Remarks: {activity.remarks || "No remarks provided."}</p>
                                    <p className="text-xs text-gray-500 mt-1">
                                        Logged at: {new Date(activity.created_at).toLocaleTimeString()}
                                    </p>
                                </li>
                            ))}
                        </ul>
                    ) : (
                        <p className="text-gray-600">You have not logged any activities today.</p>
                    )}
                </div>
            </main>
        </div>
    );
};

export default Dashboard;
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\pages\EmployeeStores.js
================================================================================
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";

export default function EmployeeStores() {
  const [stores, setStores] = useState([]);
  const [loading, setLoading] = useState(true);
  const token = localStorage.getItem("access"); // JWT token
  const navigate = useNavigate();

  useEffect(() => {
    (async () => {
      try {
        const res = await axios.get("http://127.0.0.1:8000/accounts/employee/stores/", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setStores(res.data || []);
      } catch (err) {
        console.error("Error fetching stores:", err);
      } finally {
        setLoading(false);
      }
    })();
  }, [token]);

  const openMaps = (lat, lng) => {
    if (lat == null || lng == null) return;
    const url = `https://www.google.com/maps/search/?api=1&query=${lat},${lng}`;
    window.open(url, "_blank", "noopener,noreferrer");
  };

  const openDirections = (lat, lng) => {
    if (lat == null || lng == null) return;
    const url = `https://www.google.com/maps/dir/?api=1&destination=${lat},${lng}`;
    window.open(url, "_blank", "noopener,noreferrer");
  };

  if (loading) return <div>Loading…</div>;
  if (!stores.length) return <div>No stores assigned.</div>;

  return (
    <div style={{ padding: 16 }}>
      <h2>Your Stores</h2>

      {/* Back button */}
      <button onClick={() => navigate("/dashboard")} style={{ marginBottom: 16 }}>
        ← Back to Dashboard
      </button>

      <ul style={{ listStyle: "none", padding: 0 }}>
        {stores.map((s) => (
          <li
            key={s.store_id}
            style={{ marginBottom: 12, border: "1px solid #ddd", padding: 12, borderRadius: 8 }}
          >
            <div><strong>{s.store_information}</strong></div>
            <div>Lat: {s.latitude ?? "N/A"} | Lng: {s.longitude ?? "N/A"}</div>
            <div style={{ marginTop: 8 }}>
              <button
                onClick={() => openMaps(s.latitude, s.longitude)}
                disabled={s.latitude == null || s.longitude == null}
              >
                Open in Google Maps
              </button>{" "}
              <button
                onClick={() => openDirections(s.latitude, s.longitude)}
                disabled={s.latitude == null || s.longitude == null}
              >
                Directions
              </button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}

================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\pages\Login.js
================================================================================
// C:\Users\Lenovo\Desktop\React and Django\Frontend\src\pages\Login.js

import React, { useState } from "react";
import axios from "axios";
import { useNavigate, Link } from "react-router-dom";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    setError(""); // Reset error
    try {
      const res = await axios.post("http://127.0.0.1:8000/accounts/login/", {
        email,
        password,
      });
      // Store token and user role on successful login
      localStorage.setItem("access", res.data.access);
      localStorage.setItem("refresh", res.data.refresh);
      localStorage.setItem("user_role", res.data.role); // Important for UI logic

      navigate("/"); // Navigate to the protected dashboard
    } catch (err) {
      setError("Invalid credentials. Please try again.");
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-lg">
        <h2 className="text-3xl font-extrabold text-center text-gray-900">Sign In to Your Account</h2>
        <form onSubmit={handleLogin} className="space-y-6">
          {error && <p className="text-sm text-center text-red-600 bg-red-100 p-3 rounded-md">{error}</p>}
          <div>
            <label className="text-sm font-medium text-gray-700">Email Address</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              className="w-full px-3 py-2 mt-1 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>
          <div>
            <label className="text-sm font-medium text-gray-700">Password</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              className="w-full px-3 py-2 mt-1 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>
          <button type="submit" className="w-full py-2 px-4 text-sm font-medium text-white bg-indigo-600 rounded-md hover:bg-indigo-700 transition-colors">
            Login
          </button>
        </form>
         <p className="text-sm text-center text-gray-600">
          No account?{' '}
          <Link to="/register" className="font-medium text-indigo-600 hover:text-indigo-500">
            Register here
          </Link>
        </p>
      </div>
    </div>
  );
};

export default Login;
================================================================================
File: C:\Users\Lenovo\Desktop\React and Django\Frontend\src\pages\Register.js
================================================================================
import axios from "axios";
import { useState } from "react";
import { Link, useNavigate } from "react-router-dom";

function Register() {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [role, setRole] = useState("employee"); // default role
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const navigate = useNavigate();

  const handleRegister = async (e) => {
    e.preventDefault();
    setError("");
    setSuccess("");
    try {
      // THIS URL IS NOW CORRECTED
      await axios.post("http://127.0.0.1:8000/accounts/register/", {
        name,
        email,
        password,
        role,
      });
      setSuccess("Registration successful! Redirecting to login...");
      // Redirect to the login page after a short delay
      setTimeout(() => navigate("/login"), 2000); 
    } catch (error) {
      // Provide better feedback on failure
      const errorMessage = error.response?.data?.email?.[0] || "Registration failed. Please check your details.";
      setError(errorMessage);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center">
      <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-xl shadow-lg">
        <h2 className="text-3xl font-extrabold text-center text-gray-900">Create a New Account</h2>
        
        <form onSubmit={handleRegister} className="space-y-6">
          {error && <p className="text-sm text-center text-red-600 bg-red-100 p-3 rounded-md">{error}</p>}
          {success && <p className="text-sm text-center text-green-600 bg-green-100 p-3 rounded-md">{success}</p>}
          
          <div>
            <label className="text-sm font-medium text-gray-700">Full Name</label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
              className="w-full px-3 py-2 mt-1 border border-gray-300 rounded-md shadow-sm"
            />
          </div>
          
          <div>
            <label className="text-sm font-medium text-gray-700">Email Address</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              className="w-full px-3 py-2 mt-1 border border-gray-300 rounded-md shadow-sm"
            />
          </div>
          
          <div>
            <label className="text-sm font-medium text-gray-700">Password</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              className="w-full px-3 py-2 mt-1 border border-gray-300 rounded-md shadow-sm"
            />
          </div>
          
          <div>
            <label className="text-sm font-medium text-gray-700">Role</label>
            <select disabled className="w-full px-3 py-2 mt-1 border border-gray-300 rounded-md shadow-sm bg-gray-100">
              <option value="employee">Employee</option>
            </select>
          </div>
          
          <button type="submit" className="w-full py-2 px-4 text-sm font-medium text-white bg-indigo-600 rounded-md hover:bg-indigo-700 transition-colors">
            Register
          </button>
        </form>
         <p className="text-sm text-center text-gray-600">
          Already have an account?{' '}
          <Link to="/login" className="font-medium text-indigo-600 hover:text-indigo-500">
            Sign in
          </Link>
        </p>
      </div>
    </div>
  );
}

export default Register;